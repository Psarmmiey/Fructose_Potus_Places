package com.psarmmiey.weatherviewer;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.CardView;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationServices;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity
        implements GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener {

    private final int PERMISSION_ACCESS_COARSE_LOCATION = 0;
    // List of weather objects representing the forecast
    private final List<Weather> weatherList = new ArrayList<>();
    private GoogleApiClient mGoogleApiClient;
    private double mlong;
    private double mlat;
    private double finalLat;
    private double finalLong;

    // ArrayAdapter for binding weather objects to a ListView
    private WeatherArrayAdapter weatherArrayAdapter;
    private ListView weatherListView; // displays weather info

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        // autoGenerated code to inflate layout and configure Toolbar
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // getActionBar().setDisplayHomeAsUpEnabled(true);
        // Create an instance of GoogleAPIClient.

        if (mGoogleApiClient == null) {
            mGoogleApiClient = new GoogleApiClient.Builder(this)
                    .addConnectionCallbacks(this)
                    .addOnConnectionFailedListener(this)
                    .addApi(LocationServices.API)
                    .build();
        }
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},
                    PERMISSION_ACCESS_COARSE_LOCATION);
        }


        // create ArrayAdapter to bind weatherList to the weatherListView
        weatherListView = (ListView) findViewById(R.id.weatherListView);
        weatherArrayAdapter = new WeatherArrayAdapter(this, weatherList);

        weatherListView.setAdapter(weatherArrayAdapter);


        final ProgressBar loadingSpin = (ProgressBar) findViewById(R.id.loadingBar);

        EditText locationEditText = (EditText) findViewById(R.id.locationEditText);
        locationEditText.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        CardView quickCard = (CardView) findViewById(R.id.quickSearchCard);
                        quickCard.setVisibility(View.VISIBLE);
                    }
                }
        );

        locationEditText.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {
                EditText locationEditText =
                        (EditText) findViewById(R.id.locationEditText);
                if (keyEvent.getAction() == KeyEvent.KEYCODE_ENTER) {
                    URL url = createURL(locationEditText.getText().toString());
                    if (url != null) {
                        dismissKeyboard(locationEditText);
                        GetWeatherTask getLocalWeatherTask = new GetWeatherTask();
                        getLocalWeatherTask.execute(url);
                    } else {
                        Snackbar.make(findViewById(R.id.coordinatorLayout),
                                R.string.invalid_url, Snackbar.LENGTH_LONG).show();
                    }
                }
                return false;
            }
        });

        // configure FAB to hide keyboard and initiate web services request
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // get text from locationEditText and create web service URL
                CardView quickCard = (CardView) findViewById(R.id.quickSearchCard);
                quickCard.setVisibility(View.GONE);
                quickCard.removeView(quickCard);
                EditText locationEditText =
                        (EditText) findViewById(R.id.locationEditText);
                URL url = createURL(locationEditText.getText().toString());

                // hide keyboard and initiate a GetWeatherTask to download
                // weather data from OpenWeatherMap.org in a separate thread
                if (url != null) {
                    dismissKeyboard(locationEditText);

                    loadingSpin.setVisibility(View.VISIBLE);

                    GetWeatherTask getLocalWeatherTask = new GetWeatherTask();
                    getLocalWeatherTask.execute(url);
                } else {
                    Snackbar.make(findViewById(R.id.coordinatorLayout),
                            R.string.invalid_url, Snackbar.LENGTH_LONG).show();
                }
            }
        });

        FloatingActionButton restaurantFab = (FloatingActionButton) findViewById(R.id.restaurantFab);
        restaurantFab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // get text from locationEditText and create web service URL
                CardView quickCard = (CardView) findViewById(R.id.quickSearchCard);
                quickCard.setVisibility(View.GONE);
                quickCard.removeView(quickCard);
                EditText locationEditText =
                        (EditText) findViewById(R.id.locationEditText);
                locationEditText.setText(R.string.restaurant);
                URL url = createURL(locationEditText.getText().toString());

                // hide keyboard and initiate a GetWeatherTask to download
                // weather data from OpenWeatherMap.org in a separate thread
                if (url != null) {
                    dismissKeyboard(locationEditText);

                    loadingSpin.setVisibility(View.VISIBLE);

                    GetWeatherTask getLocalWeatherTask = new GetWeatherTask();
                    getLocalWeatherTask.execute(url);
                } else {
                    Snackbar.make(findViewById(R.id.coordinatorLayout),
                            R.string.invalid_url, Snackbar.LENGTH_LONG).show();
                }
            }
        });


    }

    // programmatically dismiss keyboard when user touches FAB
    private void dismissKeyboard(View view) {
        InputMethodManager imm = (InputMethodManager) getSystemService(
                Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);

    }

    protected void onStart() {
        mGoogleApiClient.connect();
        super.onStart();
    }

    public void onConnected(Bundle connectionHint) {
        try {
            Location mLastLocation = LocationServices.FusedLocationApi.getLastLocation(
                    mGoogleApiClient);
            if (mLastLocation != null) {
                setMlat(mLastLocation.getLatitude());
                setMlong(mLastLocation.getLongitude());
            }
        } catch (SecurityException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case PERMISSION_ACCESS_COARSE_LOCATION:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // All good!
                    Snackbar.make(findViewById(R.id.coordinatorLayout),
                            "Location Access Granted", Snackbar.LENGTH_LONG).show();
                } else {
                    Toast.makeText(this, "Need your location!", Toast.LENGTH_SHORT).show();
                }

                break;
        }
    }

    private double getMlong() {
        return mlong;
    }

    private void setMlong(double mlong) {
        this.mlong = mlong;
    }

    private double getMlat() {
        return mlat;
    }

    private void setMlat(double mlat) {
        this.mlat = mlat;
    }

    @Override
    public void onConnectionSuspended(int i) {
        Snackbar.make(findViewById(R.id.coordinatorLayout),
                R.string.invalid_url, Snackbar.LENGTH_LONG).show();
    }

    // create google places web service URL using the service intended
    @Nullable
    private URL createURL(String places) {
        String apiKey = getString(R.string.api_key);
        String baseUrl = getString(R.string.web_service_url);
        double lat = 1.0;
        String order = "&rankby=distance&";
        //  String location = "-33.8670522,151.1957362&";


        try {
            // create URL for specified city and imperial units (Fahrenheit)
            System.out.print(getMlat());
            String urlString;
            urlString =
                    "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location="
                            + getMlat() + "," + getMlong() + "&rankby=distance" +
                            "&name=" + places + "&key=AIzaSyA7f3V7984G9n8LggAe5xL2wuCq0874sbs";

            return new URL(urlString);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null; // URL was malformed
    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

        Snackbar.make(findViewById(R.id.coordinatorLayout),
                R.string.internet_error, Snackbar.LENGTH_LONG).show();
    }

    // create Weather objects from JSONObject containing the forecast
    private void convertJSONtoArrayList(JSONObject forecast) {
        weatherList.clear(); // clear old weather data

        try {
            // get forecast's "list" JSONArray
            JSONArray list = forecast.getJSONArray("results");
            if (forecast.getJSONArray("results") == null) {
                Snackbar.make(findViewById(R.id.coordinatorLayout),
                        R.string.read_error, Snackbar.LENGTH_LONG).show();
            }

            for (int i = 0; i < list.length(); ++i) {

                JSONObject place = list.getJSONObject(i); // get one day's data
                JSONObject north = place.getJSONObject("geometry");
                JSONObject location = north.getJSONObject("location");

                // set destination latitude and longitude
                setFinalLat(location.getDouble("lat"));
                setFinalLong(location.getDouble("lng"));

                ProgressBar loadingSpin = (ProgressBar) findViewById(R.id.loadingBar);
                loadingSpin.setVisibility(View.GONE);


                weatherList.add(new Weather(
                        place.getString("name"), // name of place
                        getFinalLat(), // distance between current location and destination
                        getFinalLong(),// maximum temperature
                        calcDistance(getMlat(), getMlong(), location.getDouble("lat"), location.getDouble("lng")), // Distance
                        place.getString("vicinity"), // place description
                        place.getString("icon"))); // icon name


                weatherListView.setOnItemClickListener(
                        new AdapterView.OnItemClickListener() {
                            @Override
                            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                Uri gmmIntentUri =
                                        Uri.parse("google.navigation:q=" +
                                                getFinalLat() + "," + getFinalLong());
                                Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
                                mapIntent.setPackage("com.google.android.apps.maps");
                                startActivity(mapIntent);
                            }
                        }
                );
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    // makes the REST web services call to get weather data and
    // saves the data to a local HTML file

    private double calcDistance(double latA, double longA, double latB, double longB) {
        Location locationA = new Location("Initial");
        locationA.setLatitude(latA);
        locationA.setLongitude(longA);
        Location locationB = new Location("Final");
        locationB.setLatitude(latB);
        locationB.setLongitude(longB);
        return (double) ((locationA.distanceTo(locationB)) / 1000);
    }

    private double getFinalLong() {
        return finalLong;
    }

    private void setFinalLong(double finalLong) {
        this.finalLong = finalLong;
    }

    private double getFinalLat() {
        return finalLat;
    }

    private void setFinalLat(double finalLat) {
        this.finalLat = finalLat;
    }

    private class GetWeatherTask
            extends AsyncTask<URL, Void, JSONObject> {
        @Override
        protected JSONObject doInBackground(URL... params) {
            HttpURLConnection connection = null;

            try {
                connection = (HttpURLConnection) params[0].openConnection();
                int response = connection.getResponseCode();

                if (response == HttpURLConnection.HTTP_OK) {
                    StringBuilder builder = new StringBuilder();

                    try (BufferedReader reader = new BufferedReader(
                            new InputStreamReader(connection.getInputStream()))) {
                        String line;

                        while ((line = reader.readLine()) != null) {
                            builder.append(line);
                        }
                    } catch (IOException e) {
                        Snackbar.make(findViewById(R.id.coordinatorLayout),
                                R.string.read_error, Snackbar.LENGTH_LONG).show();
                        e.printStackTrace();
                    }
                    return new JSONObject(builder.toString());
                } else {
                    Snackbar.make(findViewById(R.id.coordinatorLayout),
                            R.string.connect_error, Snackbar.LENGTH_LONG).show();
                }
            } catch (Exception e) {
                Snackbar.make(findViewById(R.id.coordinatorLayout),
                        R.string.connect_error, Snackbar.LENGTH_LONG).show();
            } finally {
                assert connection != null;
                connection.disconnect(); // close the httpURLConnection
            }
            return null;
        }

        // process JSON response and update ListView
        //@Override
        protected void onPostExecute(JSONObject weather) {

            convertJSONtoArrayList(weather); // repopulate weatherList
            System.out.println(weather);

            weatherArrayAdapter.notifyDataSetChanged(); // rebind to ListView
            weatherListView.smoothScrollToPosition(0); // scroll to top


        }
    }


}

